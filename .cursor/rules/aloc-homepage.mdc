---
description: ALOC Homepage 프로젝트 개발 규칙
globs: 
    - "src/**/*.{ts,tsx}"
alwaysApply: true
---

# Aloc Homepage - Cursor Rules

## 프로젝트 개요
- **프로젝트명**: Aloc Homepage
- **기술 스택**: Next.js 15, React 19, TypeScript, Tailwind CSS
- **패키지 매니저**: pnpm
- **언어**: 한국어 UI

---

## 코딩 스타일 및 컨벤션

### TypeScript
- 모든 파일은 TypeScript로 작성
- `strict` 모드 사용
- 타입은 명시적으로 정의 (암묵적 추론 최소화)

### React 컴포넌트
- 함수형 컴포넌트만 허용
- 클라이언트 컴포넌트는 상단에 `'use client'` 디렉티브 필수
- 컴포넌트명은 PascalCase
- props는 항상 구조 분해 할당(destructuring)으로 받기

### 임포트 규칙
- 절대 경로(`@/components` 등) 사용
- 외부 라이브러리 → React → 로컬 모듈 순서로 임포트
- 임포트는 알파벳 순 정렬

### 스타일링
- Tailwind CSS 필수 사용
- 컬러 시스템은 CSS 변수 기반
- 클래스명 병합 시 cn() 유틸리티 사용
- 모바일 우선 반응형 설계
- 다크/라이트 테마 지원

### 네이밍 컨벤션
- 파일명: kebab-case (예: `user-profile.tsx`)
- 변수/함수: camelCase
- 상수: UPPER_SNAKE_CASE
- 컴포넌트: PascalCase

---

## 개발 가이드라인

### UI 컴포넌트
- 모든 UI는 접근성(a11y) 고려
- 로딩/에러 상태 명확히 처리

### 상태 관리
- 글로벌 상태는 Zustand 사용
- 로컬 상태는 useState

### 아이콘
- 아이콘 크기 일관성 유지

### 한국어 UI
- 모든 UI/메시지는 한국어
- 날짜/시간은 한국 표준

---

## 코드 품질

### ESLint & Prettier
- ESLint 규칙 준수
- Prettier 자동 포맷팅
- 커밋 전 린트 체크 필수

### 성능 최적화
- 동적 임포트 활용
- 불필요한 리렌더 방지

### 에러 처리
- try-catch로 예외 처리
- 사용자 친화적 에러 메시지
- 에러 바운더리 구현

---

## 권장사항
- 단일 책임 원칙
- 재사용성 높은 컴포넌트 작성
- Props 인터페이스 명확화
- 주석은 **Why** 설명 중심

---

## 금지사항
- 인라인 스타일 사용 금지
- console.log는 개발 중에만 허용
- any 타입 지양
- 하드코딩 값 금지 (상수화)
- 3단계 이상 깊은 중첩 구조 금지